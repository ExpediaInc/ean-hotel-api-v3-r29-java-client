buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://maven.ean/content/groups/local-repos" }
        maven { url 'http://maven.ean/content/groups/libs-releases-local' }
        maven { url 'http://maven.ean/content/groups/libs-snapshots-local' }
        maven { url 'http://maven.ean/content/groups/eviware-cache' }
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.ean.gradle:ean-gradle-plugins:0.7.28'
    }
}

def configDir = new File(rootDir, 'config')

apply plugin: 'ean-project'
apply plugin:'java'
apply plugin:'idea'
apply plugin:'eclipse'

// Java compatibility versions
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'

    // Jersey 1.x + Jackson
    //compile 'asm:asm:3.3.1'
    //compile 'com.sun.jersey:jersey-client:1.19'
    //compile 'com.sun.jersey:jersey-bundle:1.19'

    // Jersey 2.x
    compile 'org.glassfish.jersey.core:jersey-client:2.21'
    compile 'org.glassfish.jersey.connectors:jersey-apache-connector:2.21'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.21'

    // latest is 2.6.1, booking service uses 2.6.1
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.1'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.1'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.6.1'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.6.1'
    //compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.6.1'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.1'

    compile 'commons-logging:commons-logging:1.2'
    compile 'commons-validator:commons-validator:1.4.0'
    compile 'org.apache.commons:commons-lang3:3.1'
    compile 'org.apache.commons:commons-collections4:4.0'

    runtime 'log4j:log4j:1.2.17'

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

sourceSets {
    unitTest {
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
        java {
            srcDir 'src/test/java/unit'
        }

        resources {
            srcDir 'src/test/java/resources'
        }
    }

    integrationTest {
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
        java {
            srcDir 'src/test/java/integration'
        }

        resources {
            srcDir 'src/test/java/resources'
        }
    }

    functionalTest {
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
        java {
            srcDir 'src/test/java/functional'
        }

        resources {
            srcDir 'src/test/java/resources'
        }
    }
}

task unitTest(type: Test, group: 'Verification', description: 'Runs the unit tests.') {
    testClassesDir = sourceSets.unitTest.output.classesDir
    classpath += sourceSets.unitTest.runtimeClasspath
}

task integrationTest(type: Test, group: 'Verification', description: 'Runs the integration tests.') {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath += sourceSets.integrationTest.runtimeClasspath
}

task functionalTest(type: Test, group: 'Verification', description: 'Runs the functional tests.') {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath += sourceSets.functionalTest.runtimeClasspath
}

integrationTest.mustRunAfter unitTest
task test(overwrite: true, group: 'Verification', description: 'Run all tests', dependsOn: [unitTest, integrationTest]) {}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

